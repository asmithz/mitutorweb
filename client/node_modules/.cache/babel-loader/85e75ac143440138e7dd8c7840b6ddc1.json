{"ast":null,"code":"import { clone } from '@progress/kendo-react-common';\nimport * as React from 'react';\nimport { useSchedulerFieldsContext, useSchedulerGroupsContext, useSchedulerViewSelectedItemsContext } from '../../context';\nimport { useControlledState } from '../../hooks/useControlledState';\nimport { DATA_ACTION } from '../../main';\nimport { getField, setField, slotDive } from '../../utils';\n/**\n * Represents the available `action` types for the `SchedulerItemDragItemAction` objects.\n *\n * The available types are:\n * - `DRAG_ITEM_SET'`\n * - `DRAG_ITEM_START'`\n * - `DRAG_ITEM_DRAG'`\n * - `DRAG_ITEM_COMPLETE'`\n * - `DRAG_ITEM_COMPLETE_OCCURRENCE'`\n * - `DRAG_ITEM_COMPLETE_SERIES'`\n * - `DRAG_ITEM_RESET'`\n * - `DRAG_ITEM_DRAG_SELECTED`\n */\n\nexport var DRAG_ITEM_ACTION;\n\n(function (DRAG_ITEM_ACTION) {\n  DRAG_ITEM_ACTION[\"set\"] = \"DRAG_ITEM_SET\";\n  DRAG_ITEM_ACTION[\"start\"] = \"DRAG_ITEM_START\";\n  DRAG_ITEM_ACTION[\"drag\"] = \"DRAG_ITEM_DRAG\";\n  DRAG_ITEM_ACTION[\"complete\"] = \"DRAG_ITEM_COMPLETE\";\n  DRAG_ITEM_ACTION[\"completeOccurrence\"] = \"DRAG_ITEM_COMPLETE_OCCURRENCE\";\n  DRAG_ITEM_ACTION[\"completeSeries\"] = \"DRAG_ITEM_COMPLETE_SERIES\";\n  DRAG_ITEM_ACTION[\"reset\"] = \"DRAG_ITEM_RESET\";\n  DRAG_ITEM_ACTION[\"dragSelected\"] = \"DRAG_ITEM_DRAG_SELECTED\";\n})(DRAG_ITEM_ACTION || (DRAG_ITEM_ACTION = {}));\n\n;\n/** @hidden */\n\nexport var useDragItem = function (config, state) {\n  var offset = React.useRef(0);\n  var initialXRef = React.useRef(0);\n  var initialYRef = React.useRef(0);\n  var oldSlot = React.useRef(null);\n\n  var _a = useControlledState.apply(void 0, state),\n      dragItem = _a[0],\n      setDragItem = _a[1];\n\n  var selectedItems = useSchedulerViewSelectedItemsContext()[0];\n  var fields = useSchedulerFieldsContext();\n  var groups = useSchedulerGroupsContext();\n\n  var handleDragItemAction = function (action) {\n    var newDragItem;\n\n    switch (action.type) {\n      case DRAG_ITEM_ACTION.set:\n        newDragItem = action.payload;\n        break;\n\n      case DRAG_ITEM_ACTION.reset:\n        newDragItem = null;\n        break;\n\n      case DRAG_ITEM_ACTION.dragSelected:\n        {\n          if (Math.abs(initialXRef.current - action.payload.x) < 10 && Math.abs(initialYRef.current - action.payload.y) < 10) {\n            return;\n          }\n\n          var slot = slotDive(action.payload.x, action.payload.y, 7);\n\n          if (!slot) {\n            return;\n          }\n\n          if (slot === oldSlot.current) {\n            return;\n          }\n\n          var dataItem = clone(config.dataItem);\n          var slotStart = slot.getAttribute('data-slot-start');\n          var slotIsAllDay = slot.getAttribute('data-slot-allday') === 'true';\n\n          if (!config.ignoreIsAllDay && slotIsAllDay !== config.isAllDay) {\n            return;\n          }\n\n          var itemStart = new Date(getField(dataItem, fields.start));\n          var distance_1 = Number(slotStart) - itemStart.getTime();\n          var newDragItems = selectedItems.map(function (si) {\n            if (!si.current) {\n              return null;\n            }\n\n            var selectedDataItem = clone(si.current.props.dataItem);\n            var selectedStart = new Date(si.current.props.start.getTime() + distance_1);\n            var selectedEnd = new Date(si.current.props.end.getTime() + distance_1);\n            setField(selectedDataItem, fields.start, selectedStart);\n            setField(selectedDataItem, fields.end, selectedEnd);\n            return selectedDataItem;\n          }).filter(Boolean);\n          oldSlot.current = slot;\n          newDragItem = newDragItems.slice();\n          break;\n        }\n\n      case DRAG_ITEM_ACTION.start:\n        {\n          var clientX = action.payload.x;\n          var clientY = action.payload.y;\n          initialXRef.current = clientX;\n          initialYRef.current = clientY;\n          var slot = slotDive(clientX, clientY, 7);\n\n          if (!slot) {\n            return;\n          }\n\n          var dataItem = clone(config.dataItem);\n          var slotStart = slot.getAttribute('data-slot-start');\n          var itemStart = getField(dataItem, fields.start);\n\n          if (slotStart === null) {\n            return;\n          }\n\n          offset.current = Number(slotStart) - new Date(itemStart).getTime();\n          break;\n        }\n\n      case DRAG_ITEM_ACTION.drag:\n        {\n          if (Math.abs(initialXRef.current - action.payload.x) < 10 && Math.abs(initialYRef.current - action.payload.y) < 10) {\n            return;\n          }\n\n          var slot = slotDive(action.payload.x, action.payload.y, 7);\n\n          if (!slot) {\n            return;\n          }\n\n          if (slot === oldSlot.current) {\n            return;\n          }\n\n          var dataItem_1 = clone(config.dataItem);\n          var slotStart = slot.getAttribute('data-slot-start');\n          var slotGroupIndex_1 = slot.getAttribute('data-slot-group');\n          var slotIsAllDay = slot.getAttribute('data-slot-allday') === 'true';\n\n          if (!config.ignoreIsAllDay && slotIsAllDay !== config.isAllDay) {\n            return;\n          }\n\n          var itemStart = new Date(getField(dataItem_1, fields.start));\n          var itemEnd = new Date(getField(dataItem_1, fields.end));\n          var duration = itemEnd.getTime() - itemStart.getTime();\n          var start = new Date(Number(slotStart) - Number(offset.current));\n          var end = new Date(Number(slotStart) - Number(offset.current) + duration);\n          var group = groups.find(function (g) {\n            return g.index === Number(slotGroupIndex_1);\n          });\n          setField(dataItem_1, fields.start, start);\n          setField(dataItem_1, fields.end, end);\n\n          if (group && groups.length > 1) {\n            group.resources.forEach(function (resource) {\n              if (!resource.multiple) {\n                setField(dataItem_1, resource.field, resource[resource.valueField]);\n              }\n            });\n          }\n\n          oldSlot.current = slot;\n\n          if (dataItem_1) {\n            newDragItem = dataItem_1;\n          }\n\n          break;\n        }\n\n      case DRAG_ITEM_ACTION.complete:\n        {\n          newDragItem = null;\n\n          if (config.onDataAction && dragItem) {\n            config.onDataAction.call(undefined, {\n              type: DATA_ACTION.update,\n              series: false,\n              dataItem: dragItem\n            });\n          }\n\n          break;\n        }\n\n      case DRAG_ITEM_ACTION.completeOccurrence:\n        {\n          newDragItem = null;\n          var newDataItem = Array.isArray(dragItem) ? dragItem.slice() : clone(dragItem);\n\n          if (config.onDataAction && dragItem) {\n            config.onDataAction.call(undefined, {\n              type: DATA_ACTION.update,\n              series: false,\n              dataItem: newDataItem\n            });\n          }\n\n          break;\n        }\n\n      case DRAG_ITEM_ACTION.completeSeries:\n        {\n          newDragItem = null;\n          var newDataItems = void 0;\n\n          if (Array.isArray(dragItem)) {\n            newDataItems = dragItem.map(function (di) {\n              var updated = clone(di);\n              setField(updated, fields.start, getField(di, fields.start));\n              setField(updated, fields.end, getField(di, fields.end));\n              return updated;\n            });\n          } else {\n            var updated = clone(dragItem);\n            setField(updated, fields.start, getField(dragItem, fields.start));\n            setField(updated, fields.end, getField(dragItem, fields.end));\n            newDataItems = updated;\n          }\n\n          if (config.onDataAction && newDataItems) {\n            config.onDataAction.call(undefined, {\n              type: DATA_ACTION.update,\n              series: true,\n              dataItem: newDataItems\n            });\n          }\n\n          break;\n        }\n\n      default:\n        newDragItem = dragItem;\n        break;\n    }\n\n    setDragItem(newDragItem);\n  };\n\n  return [dragItem, setDragItem, handleDragItemAction];\n};","map":{"version":3,"sources":["/home/asmith/taller/proyecto1/proyecto-taller/client/node_modules/@progress/kendo-react-scheduler/dist/es/items/hooks/use-drag-item.js"],"names":["clone","React","useSchedulerFieldsContext","useSchedulerGroupsContext","useSchedulerViewSelectedItemsContext","useControlledState","DATA_ACTION","getField","setField","slotDive","DRAG_ITEM_ACTION","useDragItem","config","state","offset","useRef","initialXRef","initialYRef","oldSlot","_a","apply","dragItem","setDragItem","selectedItems","fields","groups","handleDragItemAction","action","newDragItem","type","set","payload","reset","dragSelected","Math","abs","current","x","y","slot","dataItem","slotStart","getAttribute","slotIsAllDay","ignoreIsAllDay","isAllDay","itemStart","Date","start","distance_1","Number","getTime","newDragItems","map","si","selectedDataItem","props","selectedStart","selectedEnd","end","filter","Boolean","slice","clientX","clientY","drag","dataItem_1","slotGroupIndex_1","itemEnd","duration","group","find","g","index","length","resources","forEach","resource","multiple","field","valueField","complete","onDataAction","call","undefined","update","series","completeOccurrence","newDataItem","Array","isArray","completeSeries","newDataItems","di","updated"],"mappings":"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","sourcesContent":["import { clone } from '@progress/kendo-react-common';\nimport * as React from 'react';\nimport { useSchedulerFieldsContext, useSchedulerGroupsContext, useSchedulerViewSelectedItemsContext } from '../../context';\nimport { useControlledState } from '../../hooks/useControlledState';\nimport { DATA_ACTION } from '../../main';\nimport { getField, setField, slotDive } from '../../utils';\n/**\n * Represents the available `action` types for the `SchedulerItemDragItemAction` objects.\n *\n * The available types are:\n * - `DRAG_ITEM_SET'`\n * - `DRAG_ITEM_START'`\n * - `DRAG_ITEM_DRAG'`\n * - `DRAG_ITEM_COMPLETE'`\n * - `DRAG_ITEM_COMPLETE_OCCURRENCE'`\n * - `DRAG_ITEM_COMPLETE_SERIES'`\n * - `DRAG_ITEM_RESET'`\n * - `DRAG_ITEM_DRAG_SELECTED`\n */\nexport var DRAG_ITEM_ACTION;\n(function (DRAG_ITEM_ACTION) {\n    DRAG_ITEM_ACTION[\"set\"] = \"DRAG_ITEM_SET\";\n    DRAG_ITEM_ACTION[\"start\"] = \"DRAG_ITEM_START\";\n    DRAG_ITEM_ACTION[\"drag\"] = \"DRAG_ITEM_DRAG\";\n    DRAG_ITEM_ACTION[\"complete\"] = \"DRAG_ITEM_COMPLETE\";\n    DRAG_ITEM_ACTION[\"completeOccurrence\"] = \"DRAG_ITEM_COMPLETE_OCCURRENCE\";\n    DRAG_ITEM_ACTION[\"completeSeries\"] = \"DRAG_ITEM_COMPLETE_SERIES\";\n    DRAG_ITEM_ACTION[\"reset\"] = \"DRAG_ITEM_RESET\";\n    DRAG_ITEM_ACTION[\"dragSelected\"] = \"DRAG_ITEM_DRAG_SELECTED\";\n})(DRAG_ITEM_ACTION || (DRAG_ITEM_ACTION = {}));\n;\n/** @hidden */\nexport var useDragItem = function (config, state) {\n    var offset = React.useRef(0);\n    var initialXRef = React.useRef(0);\n    var initialYRef = React.useRef(0);\n    var oldSlot = React.useRef(null);\n    var _a = useControlledState.apply(void 0, state), dragItem = _a[0], setDragItem = _a[1];\n    var selectedItems = useSchedulerViewSelectedItemsContext()[0];\n    var fields = useSchedulerFieldsContext();\n    var groups = useSchedulerGroupsContext();\n    var handleDragItemAction = function (action) {\n        var newDragItem;\n        switch (action.type) {\n            case DRAG_ITEM_ACTION.set:\n                newDragItem = action.payload;\n                break;\n            case DRAG_ITEM_ACTION.reset:\n                newDragItem = null;\n                break;\n            case DRAG_ITEM_ACTION.dragSelected: {\n                if (Math.abs(initialXRef.current - action.payload.x) < 10\n                    && Math.abs(initialYRef.current - action.payload.y) < 10) {\n                    return;\n                }\n                var slot = slotDive(action.payload.x, action.payload.y, 7);\n                if (!slot) {\n                    return;\n                }\n                if (slot === oldSlot.current) {\n                    return;\n                }\n                var dataItem = clone(config.dataItem);\n                var slotStart = slot.getAttribute('data-slot-start');\n                var slotIsAllDay = slot.getAttribute('data-slot-allday') === 'true';\n                if (!config.ignoreIsAllDay && slotIsAllDay !== config.isAllDay) {\n                    return;\n                }\n                var itemStart = new Date(getField(dataItem, fields.start));\n                var distance_1 = Number(slotStart) - itemStart.getTime();\n                var newDragItems = selectedItems.map(function (si) {\n                    if (!si.current) {\n                        return null;\n                    }\n                    var selectedDataItem = clone(si.current.props.dataItem);\n                    var selectedStart = new Date(si.current.props.start.getTime() + distance_1);\n                    var selectedEnd = new Date(si.current.props.end.getTime() + distance_1);\n                    setField(selectedDataItem, fields.start, selectedStart);\n                    setField(selectedDataItem, fields.end, selectedEnd);\n                    return selectedDataItem;\n                }).filter(Boolean);\n                oldSlot.current = slot;\n                newDragItem = newDragItems.slice();\n                break;\n            }\n            case DRAG_ITEM_ACTION.start: {\n                var clientX = action.payload.x;\n                var clientY = action.payload.y;\n                initialXRef.current = clientX;\n                initialYRef.current = clientY;\n                var slot = slotDive(clientX, clientY, 7);\n                if (!slot) {\n                    return;\n                }\n                var dataItem = clone(config.dataItem);\n                var slotStart = slot.getAttribute('data-slot-start');\n                var itemStart = getField(dataItem, fields.start);\n                if (slotStart === null) {\n                    return;\n                }\n                offset.current = Number(slotStart) - new Date(itemStart).getTime();\n                break;\n            }\n            case DRAG_ITEM_ACTION.drag: {\n                if (Math.abs(initialXRef.current - action.payload.x) < 10\n                    && Math.abs(initialYRef.current - action.payload.y) < 10) {\n                    return;\n                }\n                var slot = slotDive(action.payload.x, action.payload.y, 7);\n                if (!slot) {\n                    return;\n                }\n                if (slot === oldSlot.current) {\n                    return;\n                }\n                var dataItem_1 = clone(config.dataItem);\n                var slotStart = slot.getAttribute('data-slot-start');\n                var slotGroupIndex_1 = slot.getAttribute('data-slot-group');\n                var slotIsAllDay = slot.getAttribute('data-slot-allday') === 'true';\n                if (!config.ignoreIsAllDay && slotIsAllDay !== config.isAllDay) {\n                    return;\n                }\n                var itemStart = new Date(getField(dataItem_1, fields.start));\n                var itemEnd = new Date(getField(dataItem_1, fields.end));\n                var duration = itemEnd.getTime() - itemStart.getTime();\n                var start = new Date(Number(slotStart) - Number(offset.current));\n                var end = new Date(Number(slotStart) - Number(offset.current) + duration);\n                var group = groups.find(function (g) { return g.index === Number(slotGroupIndex_1); });\n                setField(dataItem_1, fields.start, start);\n                setField(dataItem_1, fields.end, end);\n                if (group && groups.length > 1) {\n                    group.resources.forEach(function (resource) {\n                        if (!resource.multiple) {\n                            setField(dataItem_1, resource.field, resource[resource.valueField]);\n                        }\n                    });\n                }\n                oldSlot.current = slot;\n                if (dataItem_1) {\n                    newDragItem = dataItem_1;\n                }\n                break;\n            }\n            case DRAG_ITEM_ACTION.complete: {\n                newDragItem = null;\n                if (config.onDataAction && dragItem) {\n                    config.onDataAction.call(undefined, {\n                        type: DATA_ACTION.update,\n                        series: false,\n                        dataItem: dragItem\n                    });\n                }\n                break;\n            }\n            case DRAG_ITEM_ACTION.completeOccurrence: {\n                newDragItem = null;\n                var newDataItem = Array.isArray(dragItem) ? dragItem.slice() : clone(dragItem);\n                if (config.onDataAction && dragItem) {\n                    config.onDataAction.call(undefined, {\n                        type: DATA_ACTION.update,\n                        series: false,\n                        dataItem: newDataItem\n                    });\n                }\n                break;\n            }\n            case DRAG_ITEM_ACTION.completeSeries: {\n                newDragItem = null;\n                var newDataItems = void 0;\n                if (Array.isArray(dragItem)) {\n                    newDataItems = dragItem.map(function (di) {\n                        var updated = clone(di);\n                        setField(updated, fields.start, getField(di, fields.start));\n                        setField(updated, fields.end, getField(di, fields.end));\n                        return updated;\n                    });\n                }\n                else {\n                    var updated = clone(dragItem);\n                    setField(updated, fields.start, getField(dragItem, fields.start));\n                    setField(updated, fields.end, getField(dragItem, fields.end));\n                    newDataItems = updated;\n                }\n                if (config.onDataAction && newDataItems) {\n                    config.onDataAction.call(undefined, {\n                        type: DATA_ACTION.update,\n                        series: true,\n                        dataItem: newDataItems\n                    });\n                }\n                break;\n            }\n            default:\n                newDragItem = dragItem;\n                break;\n        }\n        setDragItem(newDragItem);\n    };\n    return [dragItem, setDragItem, handleDragItemAction];\n};\n"]},"metadata":{},"sourceType":"module"}