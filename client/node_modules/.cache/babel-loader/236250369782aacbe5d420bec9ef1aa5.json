{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.timeIsBetween = exports.dateIsBetween = exports.dateHourIsBetween = void 0;\n\nvar _start_of_day = _interopRequireDefault(require(\"date-fns/start_of_day\"));\n\nvar _is_after = _interopRequireDefault(require(\"date-fns/is_after\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n} // Helper function that uses date-fns methods to determine if a date is between two other dates\n\n\nconst dateHourIsBetween = (start, candidate, end) => (candidate.getTime() === start.getTime() || (0, _is_after.default)(candidate, start)) && (candidate.getTime() === end.getTime() || (0, _is_after.default)(end, candidate));\n\nexports.dateHourIsBetween = dateHourIsBetween;\n\nconst dateIsBetween = (start, candidate, end) => {\n  const startOfCandidate = (0, _start_of_day.default)(candidate);\n  const startOfStart = (0, _start_of_day.default)(start);\n  const startOfEnd = (0, _start_of_day.default)(end);\n  return (startOfCandidate.getTime() === startOfStart.getTime() || (0, _is_after.default)(startOfCandidate, startOfStart)) && (startOfCandidate.getTime() === startOfEnd.getTime() || (0, _is_after.default)(startOfEnd, startOfCandidate));\n};\n\nexports.dateIsBetween = dateIsBetween;\n\nconst timeIsBetween = (start, candidate, end) => {\n  const candidateTime = candidate.getHours() * 60 + candidate.getMinutes();\n  const startTime = start.getHours() * 60 + start.getMinutes();\n  const endTime = end.getHours() * 60 + end.getMinutes();\n  return candidateTime >= startTime && candidateTime <= endTime;\n};\n\nexports.timeIsBetween = timeIsBetween;","map":{"version":3,"sources":["../../src/lib/date-utils.ts"],"names":["dateHourIsBetween","candidate","start","end","dateIsBetween","startOfCandidate","startOfStart","startOfEnd","timeIsBetween","candidateTime","startTime","endTime"],"mappings":";;;;;;;AAAA,IAAA,aAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,uBAAA,CAAA,CAAA;;AACA,IAAA,SAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,mBAAA,CAAA,CAAA;;;;;;EAEA;;;AACO,MAAMA,iBAAiB,GAAG,CAAA,KAAA,EAAA,SAAA,EAAA,GAAA,KAC/B,CAACC,SAAS,CAATA,OAAAA,OAAwBC,KAAK,CAA7BD,OAAwBC,EAAxBD,IAA2C,CAAA,GAAA,SAAA,CAAA,OAAA,EAAA,SAAA,EAA5C,KAA4C,CAA5C,MACCA,SAAS,CAATA,OAAAA,OAAwBE,GAAG,CAA3BF,OAAwBE,EAAxBF,IAAyC,CAAA,GAAA,SAAA,CAAA,OAAA,EAAA,GAAA,EAFrC,SAEqC,CAD1C,CADK;;;;AAIA,MAAMG,aAAa,GAAG,CAAA,KAAA,EAAA,SAAA,EAAA,GAAA,KAAsD;AACjF,QAAMC,gBAAgB,GAAG,CAAA,GAAA,aAAA,CAAA,OAAA,EAAzB,SAAyB,CAAzB;AACA,QAAMC,YAAY,GAAG,CAAA,GAAA,aAAA,CAAA,OAAA,EAArB,KAAqB,CAArB;AACA,QAAMC,UAAU,GAAG,CAAA,GAAA,aAAA,CAAA,OAAA,EAAnB,GAAmB,CAAnB;AAEA,SACE,CAACF,gBAAgB,CAAhBA,OAAAA,OAA+BC,YAAY,CAA3CD,OAA+BC,EAA/BD,IAAyD,CAAA,GAAA,SAAA,CAAA,OAAA,EAAA,gBAAA,EAA1D,YAA0D,CAA1D,MACCA,gBAAgB,CAAhBA,OAAAA,OAA+BE,UAAU,CAAzCF,OAA+BE,EAA/BF,IAAuD,CAAA,GAAA,SAAA,CAAA,OAAA,EAAA,UAAA,EAF1D,gBAE0D,CADxD,CADF;AALK,CAAA;;;;AAWA,MAAMG,aAAa,GAAG,CAAA,KAAA,EAAA,SAAA,EAAA,GAAA,KAAsD;AACjF,QAAMC,aAAa,GAAGR,SAAS,CAATA,QAAAA,KAAAA,EAAAA,GAA4BA,SAAS,CAA3D,UAAkDA,EAAlD;AACA,QAAMS,SAAS,GAAGR,KAAK,CAALA,QAAAA,KAAAA,EAAAA,GAAwBA,KAAK,CAA/C,UAA0CA,EAA1C;AACA,QAAMS,OAAO,GAAGR,GAAG,CAAHA,QAAAA,KAAAA,EAAAA,GAAsBA,GAAG,CAAzC,UAAsCA,EAAtC;AAEA,SAAOM,aAAa,IAAbA,SAAAA,IAA8BA,aAAa,IAAlD,OAAA;AALK,CAAA","sourcesContent":["import startOfDay from 'date-fns/start_of_day'\nimport isAfter from 'date-fns/is_after'\n\n// Helper function that uses date-fns methods to determine if a date is between two other dates\nexport const dateHourIsBetween = (start: Date, candidate: Date, end: Date): boolean =>\n  (candidate.getTime() === start.getTime() || isAfter(candidate, start)) &&\n  (candidate.getTime() === end.getTime() || isAfter(end, candidate))\n\nexport const dateIsBetween = (start: Date, candidate: Date, end: Date): boolean => {\n  const startOfCandidate = startOfDay(candidate)\n  const startOfStart = startOfDay(start)\n  const startOfEnd = startOfDay(end)\n\n  return (\n    (startOfCandidate.getTime() === startOfStart.getTime() || isAfter(startOfCandidate, startOfStart)) &&\n    (startOfCandidate.getTime() === startOfEnd.getTime() || isAfter(startOfEnd, startOfCandidate))\n  )\n}\n\nexport const timeIsBetween = (start: Date, candidate: Date, end: Date): boolean => {\n  const candidateTime = candidate.getHours() * 60 + candidate.getMinutes()\n  const startTime = start.getHours() * 60 + start.getMinutes()\n  const endTime = end.getHours() * 60 + end.getMinutes()\n\n  return candidateTime >= startTime && candidateTime <= endTime\n}\n"]},"metadata":{},"sourceType":"script"}