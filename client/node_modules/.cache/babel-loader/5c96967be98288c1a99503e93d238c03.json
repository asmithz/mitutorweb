{"ast":null,"code":"import { clone } from '@progress/kendo-react-common';\nimport * as React from 'react';\nimport { useSchedulerFieldsContext, useSchedulerViewSelectedItemsContext } from '../../context';\nimport { useControlledState } from '../../hooks/useControlledState';\nimport { DATA_ACTION } from '../../Scheduler';\nimport { getField, setField, slotDive } from '../../utils';\n/**\n * Represents the available `action` types for the `SchedulerItemResizeItemAction` objects.\n *\n * The available types are:\n * - `RESIZE_ITEM_SET`\n * - `RESIZE_ITEM_START`\n * - `RESIZE_ITEM_START_DRAG`\n * - `RESIZE_ITEM_START_DRAG_SELECTED`\n * - `RESIZE_ITEM_END_DRAG`\n * - `RESIZE_ITEM_END_DRAG_SELECTED`\n * - `RESIZE_ITEM_COMPLETE`\n * - `RESIZE_ITEM_COMPLETE_OCCURRENCE`\n * - `RESIZE_ITEM_COMPLETE_SERIES`\n * - `RESIZE_ITEM_RESET`\n */\n\nexport var RESIZE_ITEM_ACTION;\n\n(function (RESIZE_ITEM_ACTION) {\n  RESIZE_ITEM_ACTION[\"set\"] = \"RESIZE_ITEM_SET\";\n  RESIZE_ITEM_ACTION[\"start\"] = \"RESIZE_ITEM_START\";\n  RESIZE_ITEM_ACTION[\"startDrag\"] = \"RESIZE_ITEM_START_DRAG\";\n  RESIZE_ITEM_ACTION[\"startDragSelected\"] = \"RESIZE_ITEM_START_DRAG_SELECTED\";\n  RESIZE_ITEM_ACTION[\"endDrag\"] = \"RESIZE_ITEM_END_DRAG\";\n  RESIZE_ITEM_ACTION[\"endDragSelected\"] = \"RESIZE_ITEM_END_DRAG_SELECTED\";\n  RESIZE_ITEM_ACTION[\"complete\"] = \"RESIZE_ITEM_COMPLETE\";\n  RESIZE_ITEM_ACTION[\"completeOccurrence\"] = \"RESIZE_ITEM_COMPLETE_OCCURRENCE\";\n  RESIZE_ITEM_ACTION[\"completeSeries\"] = \"RESIZE_ITEM_COMPLETE_SERIES\";\n  RESIZE_ITEM_ACTION[\"reset\"] = \"RESIZE_ITEM_RESET\";\n})(RESIZE_ITEM_ACTION || (RESIZE_ITEM_ACTION = {}));\n\n;\n/** @hidden */\n\nexport var useResizeItem = function (config, state) {\n  var oldSlot = React.useRef(null);\n\n  var _a = useControlledState.apply(void 0, state),\n      resizeItem = _a[0],\n      setResizeItem = _a[1];\n\n  var selectedItems = useSchedulerViewSelectedItemsContext()[0];\n  var fields = useSchedulerFieldsContext();\n\n  var handleDragItemAction = function (action, event) {\n    var newResizeItem = resizeItem;\n\n    switch (action.type) {\n      case RESIZE_ITEM_ACTION.set:\n        newResizeItem = action.payload;\n        break;\n\n      case RESIZE_ITEM_ACTION.reset:\n        newResizeItem = null;\n        break;\n\n      case RESIZE_ITEM_ACTION.start:\n        {\n          event.stopPropagation();\n          event.preventDefault();\n          var clientX = action.payload.x;\n          var clientY = action.payload.y;\n          var slot = slotDive(clientX, clientY, 7);\n\n          if (!slot) {\n            return;\n          }\n\n          if (slot === oldSlot.current) {\n            return;\n          }\n\n          var slotStart = slot.getAttribute('data-slot-start');\n          var newStart = new Date(Number(slotStart));\n          var dataItem = clone(config.dataItem);\n\n          if (newStart >= getField(dataItem, fields.end)) {\n            return;\n          }\n\n          setField(dataItem, fields.start, newStart);\n          oldSlot.current = slot;\n          newResizeItem = dataItem;\n          break;\n        }\n\n      case RESIZE_ITEM_ACTION.startDragSelected:\n        {\n          event.stopPropagation();\n          event.preventDefault();\n          var clientX = action.payload.x;\n          var clientY = action.payload.y;\n          var dataItem = clone(config.dataItem);\n          var slot = slotDive(clientX, clientY, 7);\n\n          if (!slot) {\n            return;\n          }\n\n          if (slot === oldSlot.current) {\n            return;\n          }\n\n          var slotStart = slot.getAttribute('data-slot-start');\n          var itemStart = new Date(getField(dataItem, fields.start));\n          var newStart = new Date(Number(slotStart));\n          var distance_1 = newStart.getTime() - itemStart.getTime();\n          var unreachable_1 = false;\n          var newResizeItems = selectedItems.map(function (si) {\n            if (!si.current) {\n              return null;\n            }\n\n            var selectedDataItem = clone(si.current.props.dataItem);\n            var selectedStart = new Date(si.current.props.start.getTime() + distance_1);\n\n            if (selectedStart >= getField(selectedDataItem, fields.end)) {\n              unreachable_1 = true;\n              return;\n            }\n\n            setField(selectedDataItem, fields.start, selectedStart);\n            return selectedDataItem;\n          }).filter(Boolean);\n\n          if (!unreachable_1) {\n            newResizeItem = newResizeItems.slice();\n          }\n\n          break;\n        }\n\n      case RESIZE_ITEM_ACTION.startDrag:\n        {\n          var clientX = action.payload.x;\n          var clientY = action.payload.y;\n          var slot = slotDive(clientX, clientY, 7);\n\n          if (!slot) {\n            return;\n          }\n\n          if (slot === oldSlot.current) {\n            return;\n          }\n\n          var slotStart = slot.getAttribute('data-slot-start');\n          var newStart = new Date(Number(slotStart));\n          var dataItem = clone(config.dataItem);\n\n          if (newStart >= dataItem.end) {\n            return;\n          }\n\n          setField(dataItem, fields.start, newStart);\n          oldSlot.current = slot;\n          newResizeItem = dataItem;\n          break;\n        }\n\n      case RESIZE_ITEM_ACTION.endDrag:\n        {\n          var clientX = action.payload.x;\n          var clientY = action.payload.y;\n          var slot = slotDive(clientX, clientY, 7);\n\n          if (!slot) {\n            return;\n          }\n\n          if (slot === oldSlot.current) {\n            return;\n          }\n\n          var slotEnd = slot.getAttribute('data-slot-end');\n          var newEnd = new Date(Number(slotEnd));\n          var dataItem = clone(config.dataItem);\n\n          if (newEnd <= dataItem.start) {\n            return;\n          }\n\n          setField(dataItem, fields.end, newEnd);\n          oldSlot.current = slot;\n          newResizeItem = dataItem;\n          break;\n        }\n\n      case RESIZE_ITEM_ACTION.endDragSelected:\n        {\n          event.stopPropagation();\n          event.preventDefault();\n          var clientX = action.payload.x;\n          var clientY = action.payload.y;\n          var dataItem = clone(config.dataItem);\n          var slot = slotDive(clientX, clientY, 7);\n\n          if (!slot) {\n            return;\n          }\n\n          if (slot === oldSlot.current) {\n            return;\n          }\n\n          var slotEnd = slot.getAttribute('data-slot-start');\n          var itemEnd = new Date(getField(dataItem, fields.end));\n          var newEnd = new Date(Number(slotEnd));\n          var distance_2 = newEnd.getTime() - itemEnd.getTime();\n          var unreachable_2;\n          var newResizeItems = selectedItems.map(function (si) {\n            if (!si.current) {\n              return null;\n            }\n\n            var selectedDataItem = clone(si.current.props.dataItem);\n            var selectedEnd = new Date(si.current.props.end.getTime() + distance_2);\n\n            if (selectedEnd <= getField(selectedDataItem, fields.start)) {\n              unreachable_2 = true;\n              return;\n            }\n\n            setField(selectedDataItem, fields.end, selectedEnd);\n            return selectedDataItem;\n          }).filter(Boolean);\n\n          if (!unreachable_2) {\n            newResizeItem = newResizeItems.slice();\n          }\n\n          break;\n        }\n\n      case RESIZE_ITEM_ACTION.complete:\n        {\n          newResizeItem = null;\n\n          if (config.onDataAction && resizeItem) {\n            config.onDataAction.call(undefined, {\n              type: DATA_ACTION.update,\n              series: false,\n              dataItem: resizeItem\n            });\n          }\n\n          break;\n        }\n\n      case RESIZE_ITEM_ACTION.completeOccurrence:\n        {\n          newResizeItem = null;\n\n          if (config.onDataAction && resizeItem) {\n            config.onDataAction.call(undefined, {\n              type: DATA_ACTION.update,\n              series: false,\n              dataItem: resizeItem\n            });\n          }\n\n          break;\n        }\n\n      case RESIZE_ITEM_ACTION.completeSeries:\n        {\n          newResizeItem = null;\n          var newDataItem = void 0;\n\n          if (Array.isArray(resizeItem)) {\n            newDataItem = resizeItem.map(function (item) {\n              var newItem = clone(item);\n              setField(newItem, fields.start, getField(item, fields.start));\n              setField(newItem, fields.end, getField(item, fields.end));\n              return newItem;\n            });\n          } else {\n            var newItem = clone(resizeItem);\n            setField(newItem, fields.start, getField(resizeItem, fields.start));\n            setField(newItem, fields.end, getField(resizeItem, fields.end));\n            newDataItem = newItem;\n          }\n\n          if (config.onDataAction && newDataItem) {\n            config.onDataAction.call(undefined, {\n              type: DATA_ACTION.update,\n              series: true,\n              dataItem: newDataItem\n            });\n          }\n\n          break;\n        }\n\n      default:\n        newResizeItem = null;\n        break;\n    }\n\n    setResizeItem(newResizeItem);\n  };\n\n  return [resizeItem, setResizeItem, handleDragItemAction];\n};","map":{"version":3,"sources":["/home/asmith/taller/proyecto1/proyecto-taller/client/node_modules/@progress/kendo-react-scheduler/dist/es/items/hooks/use-resize-item.js"],"names":["clone","React","useSchedulerFieldsContext","useSchedulerViewSelectedItemsContext","useControlledState","DATA_ACTION","getField","setField","slotDive","RESIZE_ITEM_ACTION","useResizeItem","config","state","oldSlot","useRef","_a","apply","resizeItem","setResizeItem","selectedItems","fields","handleDragItemAction","action","event","newResizeItem","type","set","payload","reset","start","stopPropagation","preventDefault","clientX","x","clientY","y","slot","current","slotStart","getAttribute","newStart","Date","Number","dataItem","end","startDragSelected","itemStart","distance_1","getTime","unreachable_1","newResizeItems","map","si","selectedDataItem","props","selectedStart","filter","Boolean","slice","startDrag","endDrag","slotEnd","newEnd","endDragSelected","itemEnd","distance_2","unreachable_2","selectedEnd","complete","onDataAction","call","undefined","update","series","completeOccurrence","completeSeries","newDataItem","Array","isArray","item","newItem"],"mappings":"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","sourcesContent":["import { clone } from '@progress/kendo-react-common';\nimport * as React from 'react';\nimport { useSchedulerFieldsContext, useSchedulerViewSelectedItemsContext } from '../../context';\nimport { useControlledState } from '../../hooks/useControlledState';\nimport { DATA_ACTION } from '../../Scheduler';\nimport { getField, setField, slotDive } from '../../utils';\n/**\n * Represents the available `action` types for the `SchedulerItemResizeItemAction` objects.\n *\n * The available types are:\n * - `RESIZE_ITEM_SET`\n * - `RESIZE_ITEM_START`\n * - `RESIZE_ITEM_START_DRAG`\n * - `RESIZE_ITEM_START_DRAG_SELECTED`\n * - `RESIZE_ITEM_END_DRAG`\n * - `RESIZE_ITEM_END_DRAG_SELECTED`\n * - `RESIZE_ITEM_COMPLETE`\n * - `RESIZE_ITEM_COMPLETE_OCCURRENCE`\n * - `RESIZE_ITEM_COMPLETE_SERIES`\n * - `RESIZE_ITEM_RESET`\n */\nexport var RESIZE_ITEM_ACTION;\n(function (RESIZE_ITEM_ACTION) {\n    RESIZE_ITEM_ACTION[\"set\"] = \"RESIZE_ITEM_SET\";\n    RESIZE_ITEM_ACTION[\"start\"] = \"RESIZE_ITEM_START\";\n    RESIZE_ITEM_ACTION[\"startDrag\"] = \"RESIZE_ITEM_START_DRAG\";\n    RESIZE_ITEM_ACTION[\"startDragSelected\"] = \"RESIZE_ITEM_START_DRAG_SELECTED\";\n    RESIZE_ITEM_ACTION[\"endDrag\"] = \"RESIZE_ITEM_END_DRAG\";\n    RESIZE_ITEM_ACTION[\"endDragSelected\"] = \"RESIZE_ITEM_END_DRAG_SELECTED\";\n    RESIZE_ITEM_ACTION[\"complete\"] = \"RESIZE_ITEM_COMPLETE\";\n    RESIZE_ITEM_ACTION[\"completeOccurrence\"] = \"RESIZE_ITEM_COMPLETE_OCCURRENCE\";\n    RESIZE_ITEM_ACTION[\"completeSeries\"] = \"RESIZE_ITEM_COMPLETE_SERIES\";\n    RESIZE_ITEM_ACTION[\"reset\"] = \"RESIZE_ITEM_RESET\";\n})(RESIZE_ITEM_ACTION || (RESIZE_ITEM_ACTION = {}));\n;\n/** @hidden */\nexport var useResizeItem = function (config, state) {\n    var oldSlot = React.useRef(null);\n    var _a = useControlledState.apply(void 0, state), resizeItem = _a[0], setResizeItem = _a[1];\n    var selectedItems = useSchedulerViewSelectedItemsContext()[0];\n    var fields = useSchedulerFieldsContext();\n    var handleDragItemAction = function (action, event) {\n        var newResizeItem = resizeItem;\n        switch (action.type) {\n            case RESIZE_ITEM_ACTION.set:\n                newResizeItem = action.payload;\n                break;\n            case RESIZE_ITEM_ACTION.reset:\n                newResizeItem = null;\n                break;\n            case RESIZE_ITEM_ACTION.start: {\n                event.stopPropagation();\n                event.preventDefault();\n                var clientX = action.payload.x;\n                var clientY = action.payload.y;\n                var slot = slotDive(clientX, clientY, 7);\n                if (!slot) {\n                    return;\n                }\n                if (slot === oldSlot.current) {\n                    return;\n                }\n                var slotStart = slot.getAttribute('data-slot-start');\n                var newStart = new Date(Number(slotStart));\n                var dataItem = clone(config.dataItem);\n                if (newStart >= getField(dataItem, fields.end)) {\n                    return;\n                }\n                setField(dataItem, fields.start, newStart);\n                oldSlot.current = slot;\n                newResizeItem = dataItem;\n                break;\n            }\n            case RESIZE_ITEM_ACTION.startDragSelected: {\n                event.stopPropagation();\n                event.preventDefault();\n                var clientX = action.payload.x;\n                var clientY = action.payload.y;\n                var dataItem = clone(config.dataItem);\n                var slot = slotDive(clientX, clientY, 7);\n                if (!slot) {\n                    return;\n                }\n                if (slot === oldSlot.current) {\n                    return;\n                }\n                var slotStart = slot.getAttribute('data-slot-start');\n                var itemStart = new Date(getField(dataItem, fields.start));\n                var newStart = new Date(Number(slotStart));\n                var distance_1 = newStart.getTime() - itemStart.getTime();\n                var unreachable_1 = false;\n                var newResizeItems = selectedItems.map(function (si) {\n                    if (!si.current) {\n                        return null;\n                    }\n                    var selectedDataItem = clone(si.current.props.dataItem);\n                    var selectedStart = new Date(si.current.props.start.getTime() + distance_1);\n                    if (selectedStart >= getField(selectedDataItem, fields.end)) {\n                        unreachable_1 = true;\n                        return;\n                    }\n                    setField(selectedDataItem, fields.start, selectedStart);\n                    return selectedDataItem;\n                }).filter(Boolean);\n                if (!unreachable_1) {\n                    newResizeItem = newResizeItems.slice();\n                }\n                break;\n            }\n            case RESIZE_ITEM_ACTION.startDrag: {\n                var clientX = action.payload.x;\n                var clientY = action.payload.y;\n                var slot = slotDive(clientX, clientY, 7);\n                if (!slot) {\n                    return;\n                }\n                if (slot === oldSlot.current) {\n                    return;\n                }\n                var slotStart = slot.getAttribute('data-slot-start');\n                var newStart = new Date(Number(slotStart));\n                var dataItem = clone(config.dataItem);\n                if (newStart >= dataItem.end) {\n                    return;\n                }\n                setField(dataItem, fields.start, newStart);\n                oldSlot.current = slot;\n                newResizeItem = dataItem;\n                break;\n            }\n            case RESIZE_ITEM_ACTION.endDrag: {\n                var clientX = action.payload.x;\n                var clientY = action.payload.y;\n                var slot = slotDive(clientX, clientY, 7);\n                if (!slot) {\n                    return;\n                }\n                if (slot === oldSlot.current) {\n                    return;\n                }\n                var slotEnd = slot.getAttribute('data-slot-end');\n                var newEnd = new Date(Number(slotEnd));\n                var dataItem = clone(config.dataItem);\n                if (newEnd <= dataItem.start) {\n                    return;\n                }\n                setField(dataItem, fields.end, newEnd);\n                oldSlot.current = slot;\n                newResizeItem = dataItem;\n                break;\n            }\n            case RESIZE_ITEM_ACTION.endDragSelected: {\n                event.stopPropagation();\n                event.preventDefault();\n                var clientX = action.payload.x;\n                var clientY = action.payload.y;\n                var dataItem = clone(config.dataItem);\n                var slot = slotDive(clientX, clientY, 7);\n                if (!slot) {\n                    return;\n                }\n                if (slot === oldSlot.current) {\n                    return;\n                }\n                var slotEnd = slot.getAttribute('data-slot-start');\n                var itemEnd = new Date(getField(dataItem, fields.end));\n                var newEnd = new Date(Number(slotEnd));\n                var distance_2 = newEnd.getTime() - itemEnd.getTime();\n                var unreachable_2;\n                var newResizeItems = selectedItems.map(function (si) {\n                    if (!si.current) {\n                        return null;\n                    }\n                    var selectedDataItem = clone(si.current.props.dataItem);\n                    var selectedEnd = new Date(si.current.props.end.getTime() + distance_2);\n                    if (selectedEnd <= getField(selectedDataItem, fields.start)) {\n                        unreachable_2 = true;\n                        return;\n                    }\n                    setField(selectedDataItem, fields.end, selectedEnd);\n                    return selectedDataItem;\n                }).filter(Boolean);\n                if (!unreachable_2) {\n                    newResizeItem = newResizeItems.slice();\n                }\n                break;\n            }\n            case RESIZE_ITEM_ACTION.complete: {\n                newResizeItem = null;\n                if (config.onDataAction && resizeItem) {\n                    config.onDataAction.call(undefined, {\n                        type: DATA_ACTION.update,\n                        series: false,\n                        dataItem: resizeItem\n                    });\n                }\n                break;\n            }\n            case RESIZE_ITEM_ACTION.completeOccurrence: {\n                newResizeItem = null;\n                if (config.onDataAction && resizeItem) {\n                    config.onDataAction.call(undefined, {\n                        type: DATA_ACTION.update,\n                        series: false,\n                        dataItem: resizeItem\n                    });\n                }\n                break;\n            }\n            case RESIZE_ITEM_ACTION.completeSeries: {\n                newResizeItem = null;\n                var newDataItem = void 0;\n                if (Array.isArray(resizeItem)) {\n                    newDataItem = resizeItem.map(function (item) {\n                        var newItem = clone(item);\n                        setField(newItem, fields.start, getField(item, fields.start));\n                        setField(newItem, fields.end, getField(item, fields.end));\n                        return newItem;\n                    });\n                }\n                else {\n                    var newItem = clone(resizeItem);\n                    setField(newItem, fields.start, getField(resizeItem, fields.start));\n                    setField(newItem, fields.end, getField(resizeItem, fields.end));\n                    newDataItem = newItem;\n                }\n                if (config.onDataAction && newDataItem) {\n                    config.onDataAction.call(undefined, {\n                        type: DATA_ACTION.update,\n                        series: true,\n                        dataItem: newDataItem\n                    });\n                }\n                break;\n            }\n            default:\n                newResizeItem = null;\n                break;\n        }\n        setResizeItem(newResizeItem);\n    };\n    return [resizeItem, setResizeItem, handleDragItemAction];\n};\n"]},"metadata":{},"sourceType":"module"}