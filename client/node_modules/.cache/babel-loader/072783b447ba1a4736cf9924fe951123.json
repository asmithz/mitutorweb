{"ast":null,"code":"import * as React from 'react';\nimport { getPadding } from '../views/common/utils';\nimport { getBorders } from '../views/common/utils';\n/** @hidden */\n\nexport var useCellSync = function (args, inputs) {\n  var element = args.element;\n\n  var syncWidth = function () {\n    if (!element || !element.current) {\n      return;\n    }\n\n    var widest = [];\n    var biggestPadding = [];\n    var biggestBorder = [];\n    var elements = element.current.querySelectorAll(args.selector);\n    elements.forEach(function (el) {\n      var width = el.getBoundingClientRect().width;\n      var level = args.explicitDepth && args.attribute !== undefined ? el.getAttribute(args.attribute) : 0;\n      var padding = getPadding(el, true);\n      var border = getBorders(el, true);\n\n      if (level === null) {\n        return;\n      }\n\n      if (!biggestBorder[level] || border > biggestBorder[level]) {\n        biggestBorder[level] = border;\n      }\n\n      if (!biggestPadding[level] || padding > biggestPadding[level]) {\n        biggestPadding[level] = padding;\n      }\n\n      if (!widest[level] || width > widest[level]) {\n        widest[level] = width;\n      }\n    });\n    elements.forEach(function (el) {\n      var level = args.explicitDepth ? el.getAttribute(args.attribute) : 0;\n\n      if (level === null) {\n        return;\n      }\n\n      el.style.minWidth = widest[level] - biggestPadding[level] - biggestBorder[level] + \"px\";\n    });\n  };\n\n  React.useLayoutEffect(syncWidth, inputs);\n};","map":{"version":3,"sources":["/home/asmith/taller/proyecto1/proyecto-taller/client/node_modules/@progress/kendo-react-scheduler/dist/es/hooks/useCellSync.js"],"names":["React","getPadding","getBorders","useCellSync","args","inputs","element","syncWidth","current","widest","biggestPadding","biggestBorder","elements","querySelectorAll","selector","forEach","el","width","getBoundingClientRect","level","explicitDepth","attribute","undefined","getAttribute","padding","border","style","minWidth","useLayoutEffect"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,UAAT,QAA2B,uBAA3B;AACA,SAASC,UAAT,QAA2B,uBAA3B;AACA;;AACA,OAAO,IAAIC,WAAW,GAAG,UAAUC,IAAV,EAAgBC,MAAhB,EAAwB;AAC7C,MAAIC,OAAO,GAAGF,IAAI,CAACE,OAAnB;;AACA,MAAIC,SAAS,GAAG,YAAY;AACxB,QAAI,CAACD,OAAD,IAAY,CAACA,OAAO,CAACE,OAAzB,EAAkC;AAC9B;AACH;;AACD,QAAIC,MAAM,GAAG,EAAb;AACA,QAAIC,cAAc,GAAG,EAArB;AACA,QAAIC,aAAa,GAAG,EAApB;AACA,QAAIC,QAAQ,GAAGN,OAAO,CAACE,OAAR,CAAgBK,gBAAhB,CAAiCT,IAAI,CAACU,QAAtC,CAAf;AACAF,IAAAA,QAAQ,CAACG,OAAT,CAAiB,UAAUC,EAAV,EAAc;AAC3B,UAAIC,KAAK,GAAGD,EAAE,CAACE,qBAAH,GAA2BD,KAAvC;AACA,UAAIE,KAAK,GAAGf,IAAI,CAACgB,aAAL,IAAsBhB,IAAI,CAACiB,SAAL,KAAmBC,SAAzC,GAAqDN,EAAE,CAACO,YAAH,CAAgBnB,IAAI,CAACiB,SAArB,CAArD,GAAuF,CAAnG;AACA,UAAIG,OAAO,GAAGvB,UAAU,CAACe,EAAD,EAAK,IAAL,CAAxB;AACA,UAAIS,MAAM,GAAGvB,UAAU,CAACc,EAAD,EAAK,IAAL,CAAvB;;AACA,UAAIG,KAAK,KAAK,IAAd,EAAoB;AAChB;AACH;;AACD,UAAI,CAACR,aAAa,CAACQ,KAAD,CAAd,IAAyBM,MAAM,GAAGd,aAAa,CAACQ,KAAD,CAAnD,EAA4D;AACxDR,QAAAA,aAAa,CAACQ,KAAD,CAAb,GAAuBM,MAAvB;AACH;;AACD,UAAI,CAACf,cAAc,CAACS,KAAD,CAAf,IAA0BK,OAAO,GAAGd,cAAc,CAACS,KAAD,CAAtD,EAA+D;AAC3DT,QAAAA,cAAc,CAACS,KAAD,CAAd,GAAwBK,OAAxB;AACH;;AACD,UAAI,CAACf,MAAM,CAACU,KAAD,CAAP,IAAkBF,KAAK,GAAGR,MAAM,CAACU,KAAD,CAApC,EAA6C;AACzCV,QAAAA,MAAM,CAACU,KAAD,CAAN,GAAgBF,KAAhB;AACH;AACJ,KAjBD;AAkBAL,IAAAA,QAAQ,CAACG,OAAT,CAAiB,UAAUC,EAAV,EAAc;AAC3B,UAAIG,KAAK,GAAGf,IAAI,CAACgB,aAAL,GAAqBJ,EAAE,CAACO,YAAH,CAAgBnB,IAAI,CAACiB,SAArB,CAArB,GAAuD,CAAnE;;AACA,UAAIF,KAAK,KAAK,IAAd,EAAoB;AAChB;AACH;;AACDH,MAAAA,EAAE,CAACU,KAAH,CAASC,QAAT,GAAoBlB,MAAM,CAACU,KAAD,CAAN,GAAgBT,cAAc,CAACS,KAAD,CAA9B,GAAwCR,aAAa,CAACQ,KAAD,CAArD,GAA+D,IAAnF;AACH,KAND;AAOH,GAjCD;;AAkCAnB,EAAAA,KAAK,CAAC4B,eAAN,CAAsBrB,SAAtB,EAAiCF,MAAjC;AACH,CArCM","sourcesContent":["import * as React from 'react';\nimport { getPadding } from '../views/common/utils';\nimport { getBorders } from '../views/common/utils';\n/** @hidden */\nexport var useCellSync = function (args, inputs) {\n    var element = args.element;\n    var syncWidth = function () {\n        if (!element || !element.current) {\n            return;\n        }\n        var widest = [];\n        var biggestPadding = [];\n        var biggestBorder = [];\n        var elements = element.current.querySelectorAll(args.selector);\n        elements.forEach(function (el) {\n            var width = el.getBoundingClientRect().width;\n            var level = args.explicitDepth && args.attribute !== undefined ? el.getAttribute(args.attribute) : 0;\n            var padding = getPadding(el, true);\n            var border = getBorders(el, true);\n            if (level === null) {\n                return;\n            }\n            if (!biggestBorder[level] || border > biggestBorder[level]) {\n                biggestBorder[level] = border;\n            }\n            if (!biggestPadding[level] || padding > biggestPadding[level]) {\n                biggestPadding[level] = padding;\n            }\n            if (!widest[level] || width > widest[level]) {\n                widest[level] = width;\n            }\n        });\n        elements.forEach(function (el) {\n            var level = args.explicitDepth ? el.getAttribute(args.attribute) : 0;\n            if (level === null) {\n                return;\n            }\n            el.style.minWidth = widest[level] - biggestPadding[level] - biggestBorder[level] + \"px\";\n        });\n    };\n    React.useLayoutEffect(syncWidth, inputs);\n};\n"]},"metadata":{},"sourceType":"module"}